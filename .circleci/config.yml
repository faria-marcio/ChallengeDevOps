version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-ecs: circleci/aws-ecs@3.2.0

jobs:
  plan-apply:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            cd challenges/terraform/
            terraform init -input=false
            terraform plan -out tfapply -var-file dev.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - .
  apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform
          command: |
            cd challenges/terraform/
            terraform apply -auto-approve tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .
  plan-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd challenges/terraform/
            terraform plan -destroy -out tfdestroy -var-file dev.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - .
  destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd challenges/terraform/
            terraform apply -auto-approve tfdestroy
  update-cluster:
    docker:
      - image: cimg/python:3.10
    steps:
      - aws-cli/setup:
          aws-region: AWS_REGION
          session-duration: '3600'
      - aws-ecs/update-service:
          cluster: ${PROJECT_NAME}
          family: ${PROJECT_NAME}-svc
          force-new-deployment: true
  
workflows:
  plan_approve_apply:
    jobs:
      - plan-apply
      - hold-apply:
          type: approval
          requires:
            - plan-apply
      - apply:
          requires:
            - hold-apply
      - aws-ecr/build-and-push-image:
          registry-id: AWS_ECR_REGISTRY_ID
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: ${AWS_REGION}
          dockerfile: Dockerfile
          path: .
          repo: ${PROJECT_NAME}-ecr
          tag: latest
          requires:
            - apply
      - update-cluster:
          requires:
            - aws-ecr/build-and-push-image
      - plan-destroy:
          requires:
            - apply
      - hold-destroy:
          type: approval
          requires:
            - plan-destroy
      - destroy:
          requires:
            - hold-destroy